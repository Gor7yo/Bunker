// Lobby.js - –≤–µ—Ä—Å–∏—è —Å –∫–∞–º–µ—Ä–∞–º–∏ –±–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
import React, { useState, useEffect, useRef } from "react";
import "./Lobby.css";

export const Lobby = ({ ws, playerId, players }) => {
  const [localStream, setLocalStream] = useState(null);
  const [isCameraOn, setIsCameraOn] = useState(true);
  const peersRef = useRef({});
  const videoRefs = useRef({});
  const isInitialized = useRef(false);
  const streamLockRef = useRef(false);

  // =========================
  // üìπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã (–ë–ï–ó –ú–ò–ö–†–û–§–û–ù–ê)
  // =========================
  useEffect(() => {
    if (streamLockRef.current) return;
    streamLockRef.current = true;

    async function initCamera() {
      try {
        console.log("üé• –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã (–±–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)...");
        
        // üîá –í–ê–ñ–ù–û: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ, –±–µ–∑ –∞—É–¥–∏–æ
        const stream = await navigator.mediaDevices.getUserMedia({
          video: { 
            width: { ideal: 640 }, 
            height: { ideal: 480 },
            frameRate: { ideal: 30 }
          },
          // üîá –ù–ï–¢ –ê–£–î–ò–û - –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω
          audio: false
        });
        
        console.log("‚úÖ –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–±–µ–∑ –∑–≤—É–∫–∞), —Ç—Ä–µ–∫–∏:", {
          video: stream.getVideoTracks().map(t => ({enabled: t.enabled, readyState: t.readyState})),
          audio: stream.getAudioTracks().length // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0
        });
        
        setLocalStream(stream);
        
        // –°—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Å–≤–æ–µ–º—É –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—É
        if (videoRefs.current[playerId]) {
          const videoElement = videoRefs.current[playerId];
          videoElement.srcObject = stream;
          videoElement.muted = true;
          
          videoElement.play().catch(err => {
            console.warn("‚ö†Ô∏è –ê–≤—Ç–æ–ø–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:", err);
          });
        }
        
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:", err);
        setIsCameraOn(false);
        streamLockRef.current = false;
      }
    }

    if (!isInitialized.current) {
      initCamera();
      isInitialized.current = true;
    }

    return () => {
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –≤—ã—Ö–æ–¥–µ
    };
  }, [playerId]);

  // =========================
  // üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ (–ë–ï–ó –ê–£–î–ò–û)
  // =========================
  useEffect(() => {
    if (!ws || !localStream) {
      console.log("‚è≥ –û–∂–∏–¥–∞–µ–º WebSocket –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫...");
      return;
    }

    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. –ò–≥—Ä–æ–∫–æ–≤:", players.length);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    players.forEach(player => {
      if (player.id !== playerId && !peersRef.current[player.id]) {
        console.log(`üîó –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${player.name} (${player.id})`);
        createPeerConnection(player.id);
      }
    });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    Object.keys(peersRef.current).forEach(peerId => {
      if (!players.find(p => p.id === peerId)) {
        console.log(`üóëÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${peerId}`);
        peersRef.current[peerId].close();
        delete peersRef.current[peerId];
        delete videoRefs.current[peerId];
      }
    });
  }, [players, localStream, ws, playerId]);

  // =========================
  // üîó –°–æ–∑–¥–∞–Ω–∏–µ PeerConnection (–ë–ï–ó –ê–£–î–ò–û)
  // =========================
  const createPeerConnection = (remoteId) => {
    if (peersRef.current[remoteId]) {
      console.log(`‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${remoteId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return peersRef.current[remoteId];
    }

    console.log(`üéØ –°–æ–∑–¥–∞–µ–º RTCPeerConnection –¥–ª—è ${remoteId} (–±–µ–∑ –∞—É–¥–∏–æ)`);
    
    const pc = new RTCPeerConnection({
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
      ],
      iceTransportPolicy: 'all',
      bundlePolicy: 'max-bundle',
      rtcpMuxPolicy: 'require'
    });

    // üî• –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏
    if (localStream) {
      // üîá –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
      const videoTracks = localStream.getVideoTracks();
      videoTracks.forEach(track => {
        console.log(`üì§ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –¥–ª—è ${remoteId}`);
        pc.addTrack(track, localStream);
      });
      
      // üîá –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏ - –∏—Ö –Ω–µ—Ç –≤ –ø–æ—Ç–æ–∫–µ
      console.log(`üîá –ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–æ—Ç–∫–ª—é—á–µ–Ω–æ): ${localStream.getAudioTracks().length}`);
    }

    // üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
    pc.ontrack = (event) => {
      console.log(`üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç ${remoteId}`, {
        streams: event.streams.length,
        videoTracks: event.streams[0]?.getVideoTracks().length || 0,
        audioTracks: event.streams[0]?.getAudioTracks().length || 0
      });
      
      if (event.streams && event.streams[0]) {
        const remoteStream = event.streams[0];
        
        // üîá –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        remoteStream.getAudioTracks().forEach(track => {
          track.enabled = false;
          console.log(`üîá –û—Ç–∫–ª—é—á–µ–Ω –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –æ—Ç ${remoteId}`);
        });
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!videoRefs.current[remoteId]) {
          console.log(`üé• –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ${remoteId}`);
        }
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ–ª —Å–æ–∑–¥–∞—Ç—å—Å—è –≤ DOM
        setTimeout(() => {
          if (videoRefs.current[remoteId]) {
            const videoElement = videoRefs.current[remoteId];
            videoElement.srcObject = remoteStream;
            videoElement.playsInline = true;
            videoElement.muted = true; // üîá –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
            
            videoElement.play().then(() => {
              console.log(`‚úÖ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–ª—è ${remoteId} (–±–µ–∑ –∑–≤—É–∫–∞)`);
            }).catch(err => {
              console.warn(`‚ö†Ô∏è –ê–≤—Ç–æ–ø–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${remoteId}:`, err);
            });
          }
        }, 100);
      }
    };

    // üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    pc.onicecandidate = (event) => {
      if (event.candidate && ws) {
        console.log(`üßä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è ${remoteId}`);
        ws.send(JSON.stringify({
          type: "signal",
          targetId: remoteId,
          signal: {
            type: "ice-candidate",
            candidate: event.candidate
          }
        }));
      }
    };

    // üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pc.onconnectionstatechange = () => {
      console.log(`üîó ${remoteId}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${pc.connectionState}`);
    };

    pc.oniceconnectionstatechange = () => {
      console.log(`üßä ${remoteId}: ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${pc.iceConnectionState}`);
    };

    // üöÄ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à ID –±–æ–ª—å—à–µ)
    if (remoteId > playerId) {
      console.log(`üöÄ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º offer –¥–ª—è ${remoteId}`);
      
      setTimeout(async () => {
        try {
          // üîá –í –æ—Ñ–µ—Ä–µ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å –∞—É–¥–∏–æ
          const offer = await pc.createOffer({
            offerToReceiveAudio: false, // üîá –ù–ï –ø–æ–ª—É—á–∞—Ç—å –∞—É–¥–∏–æ
            offerToReceiveVideo: true   // ‚úÖ –ü–æ–ª—É—á–∞—Ç—å –≤–∏–¥–µ–æ
          });
          await pc.setLocalDescription(offer);
          
          ws.send(JSON.stringify({
            type: "signal",
            targetId: remoteId,
            signal: offer
          }));
          
          console.log(`üì§ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${remoteId} (–±–µ–∑ –∞—É–¥–∏–æ)`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –¥–ª—è ${remoteId}:`, error);
        }
      }, 1000);
    }

    peersRef.current[remoteId] = pc;
    return pc;
  };

  // =========================
  // üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–æ–≤
  // =========================
  useEffect(() => {
    if (!ws) return;

    const handleMessage = async (msg) => {
      try {
        const data = JSON.parse(msg.data);

        if (data.type === "signal" && data.fromId && data.signal) {
          console.log(`üì° –°–∏–≥–Ω–∞–ª –æ—Ç ${data.fromId}: ${data.signal.type}`);
          
          let pc = peersRef.current[data.fromId];
          if (!pc) {
            console.log(`üîó –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç ${data.fromId}`);
            pc = createPeerConnection(data.fromId);
          }

          try {
            if (data.signal.type === "offer") {
              console.log(`üì• –ü–æ–ª—É—á–µ–Ω offer –æ—Ç ${data.fromId}`);
              await pc.setRemoteDescription(new RTCSessionDescription(data.signal));
              
              // üîá –í answer —Ç–æ–∂–µ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏–º –∞—É–¥–∏–æ
              const answer = await pc.createAnswer({
                offerToReceiveAudio: false, // üîá –ù–ï –ø–æ–ª—É—á–∞—Ç—å –∞—É–¥–∏–æ
                offerToReceiveVideo: true   // ‚úÖ –ü–æ–ª—É—á–∞—Ç—å –≤–∏–¥–µ–æ
              });
              await pc.setLocalDescription(answer);
              
              ws.send(JSON.stringify({
                type: "signal",
                targetId: data.fromId,
                signal: answer
              }));
              
              console.log(`üì§ Answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${data.fromId} (–±–µ–∑ –∞—É–¥–∏–æ)`);
              
            } else if (data.signal.type === "answer") {
              console.log(`üì• –ü–æ–ª—É—á–µ–Ω answer –æ—Ç ${data.fromId}`);
              await pc.setRemoteDescription(new RTCSessionDescription(data.signal));
              
            } else if (data.signal.type === "ice-candidate" && data.signal.candidate) {
              console.log(`üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç ${data.fromId}`);
              await pc.addIceCandidate(new RTCIceCandidate(data.signal.candidate));
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç ${data.fromId}:`, error);
          }
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    };

    ws.addEventListener('message', handleMessage);
    return () => ws.removeEventListener('message', handleMessage);
  }, [ws, localStream]);

  // =========================
  // üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π (—Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ)
  // =========================
  const toggleCamera = () => {
    if (!localStream) return;

    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
      videoTrack.enabled = !videoTrack.enabled;
      setIsCameraOn(videoTrack.enabled);
      console.log(`üìπ –ö–∞–º–µ—Ä–∞ ${videoTrack.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    }
    
    // üîá –ê—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
  };

  // =========================
  // üßπ –û—á–∏—Å—Ç–∫–∞
  // =========================
  useEffect(() => {
    return () => {
      console.log("üßπ –û—á–∏—Å—Ç–∫–∞ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π");
      Object.values(peersRef.current).forEach(pc => {
        if (pc && pc.connectionState !== 'closed') {
          pc.close();
        }
      });
      
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  // =========================
  // üé® –†–µ–Ω–¥–µ—Ä
  // =========================
  return (
    <div className="lobby-container">
      <div className="lobby-grid">
        {players.filter(p => p.role !== "host").map((player) => (
          <div key={player.id} className="player-video-card">
            <video
              ref={(el) => {
                if (el && !videoRefs.current[player.id]) {
                  console.log(`üé• –°–æ–∑–¥–∞–Ω –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ${player.id}`);
                  videoRefs.current[player.id] = el;
                  
                  // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ –∏ –µ—Å—Ç—å –ø–æ—Ç–æ–∫ - —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º
                  if (player.id === playerId && localStream) {
                    el.srcObject = localStream;
                    el.muted = true; // üîá –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
                    el.play().catch(console.warn);
                  }
                }
              }}
              autoPlay
              playsInline
              muted={true} // üîá –í—Å–µ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
              className="player-video"
            />
            <div className="player-info">
              <div className="player-name">{player.name}</div>
              <div className="player-status">
                {peersRef.current[player.id]?.connectionState === 'connected' ? 'üü¢' : 'üü°'}
                {player.ready ? ' ‚úÖ' : ' ‚è≥'}
                {' üîá'} {/* üîá –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∑–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω */}
              </div>
            </div>
            
            {player.id === playerId && !isCameraOn && (
              <div className="camera-off-overlay">
                <div className="camera-off-text">–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞</div>
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="controls-panel">
        <button 
          onClick={toggleCamera}
          className={`control-btn ${isCameraOn ? 'active' : 'inactive'}`}
        >
          {isCameraOn ? "üìπ –í—ã–∫–ª –∫–∞–º–µ—Ä—É" : "üìπ‚ùå –í–∫–ª –∫–∞–º–µ—Ä—É"}
        </button>
        
        <div className="status-info">
          <span>–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {Object.values(peersRef.current).filter(pc => pc.connectionState === 'connected').length}</span>
          <span className="no-audio-badge">üîá –ë–µ–∑ –∑–≤—É–∫–∞</span>
        </div>
      </div>
    </div>
  );
};
